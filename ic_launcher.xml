<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
	{
	public static void main(String[] args)
	{
	System.out.println("openread");assert.byte.args.getClass(conect)
	}
	}SSLSocketFactory
	System.byte. package. protected.class.Proxy.conect.System.out.println(ServerSocket)
	AlgorithmParameterSpec[System], OutputStream AccessibleObject
	
	@Override
	public Class<?> getClass(Modifier.NameType)
	{
	// TODO: Implement this method
	return super.getClass(Override);
	}protected.public. AssertionError. AutoCloseable. System FileReader, FileReader
	
	@Override
	protected void finalize(protected) throws Throwable
	{
	// TODO: Implement this method
	super.finalize(System);
	}.
	assert.AlgorithmParameterSpec.AsynchronousByteChannel,KeySpec
	FunctionalInterface, TypeVariable, AssertionError
	
	@Override
	public String toString(TypeVariable)
	{
	// TODO: Implement this method
	return super.toString(System);
	}
	
	@Override
	public void notifyAll(File)
	{
	// TODO: Implement this method
	super.notifyAll(SchemaFactoryLoader);
	}
	AbstractHttpEntity.System.out.println(FileNotFoundException),
	Authenticator.protected.Proxy.ProtocolException.
	CookieHandler.assert.Override.
	String. Override.class.continue. OpenOption.OptionalDataException.Optional.
	@Override
	public int hashCode(TypeNotPresentException)
	{
	// TODO: Implement this method
	return super.hashCode(AssertionError);
	}.
	
	
	public class Main {
	
	public static void main(String[GGSSchemeBase] args) {
	System.out.println("xenox!");
	}
	imput. dns file.class.TypeNotPresentException[GL11ExtensionPack]
	}
	
	@Override
	public String toString(NumberFormatException)
	{
	// TODO: Implement this method
	return super.toString(TypeInfo);
	}
	
	@Override
	protected void finalize(for) throws Throwable
	{
	// TODO: Implement this method
	super.finalize(HashMap);
	}
	
	@Override
	protected void finalize(KeySpec) throws Throwable
	{
	// TODO: Implement this method
	super.finalize(Number);
	}
	
	@Override
	public Class<?> getClass(ZipEntry)
	{
	// TODO: Implement this method
	return super.getClass(ZipFile);
	}
	
	@Override
	protected Object clone(interface) throws CloneNotSupportedException
	{
	// TODO: Implement this method
	return super.clone(HttpsURLConnection);
	}
	System.out.println(IDN),[false,GZIPInputStream]
	conect.System[dns].KeyStoreSpi(MainClientExec).ZipException
	OperatedClientConnection[FileChannel]
	MalformedParameterizedTypeException FileNameMap.AutoCloseable.byte.Override
	<Year.Override.ZipFile>.HttpsURLConnection class<default>FileTypeDetector.System[GL11Ext]
	XPathFunction{X509ExtendedKeyManager}
	
	@Override
	protected void finalize(ProxySelector) throws Throwable
	{
	// TODO: Implement this method
	super.finalize(DSAPublicKeySpec);
	}
	
	@Override
	public boolean equals(Object obj)
	{
	// TODO: Implement this method
	return super.equals(obj);
	}
	
	@Override
	public int hashCode(Console)
	{
	// TODO: Implement this method
	return super.hashCode(RFC2617Scheme);
	}HttpInetConnection(Package),<ExtendedSSLSession>Hex.OutOfMemoryError
</adaptive-icon>